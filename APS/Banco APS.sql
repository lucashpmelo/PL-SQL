
CREATE TABLE Tb_Cliente (
Cod_Cliente INTEGER NOT NULL,
Nome_Cliente VARCHAR2(45) NOT NULL,
Cpf_Cliente VARCHAR2(14) NOT NULL,
Rg_Cliente VARCHAR2(9) NOT NULL,
CONSTRAINT pk_Cliente PRIMARY KEY (Cod_Cliente)
);

CREATE SEQUENCE sq_Cliente;

INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Vanesa Damaceno Barbosa', '286.209.389-84', '52791962');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Joaquim Francisco Souza', '934.821.016-30', '26978413');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Durinam Salqueiro', '442.235.784-20', '39426923');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Felipe Santos', '784.527.894-52', '82640645');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Emanual Augusto Tavares', '278.964.537-84', '93492349');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Adamastor Jatoba Mello', '445.796.342-80', '964238138');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Jertrudes Silva Souza', '278.554.936-45', '964983321');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Suzi Ramos Neto', '789.538.754-21', '239734652');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Teobaldo Pisquila', '496.378.144-40', '783165977');
INSERT INTO Tb_Cliente (
Cod_Cliente, Nome_Cliente, Cpf_Cliente, Rg_Cliente) VALUES (sq_Cliente.NEXTVAL, 'Vandier Maciel De Souza', '112.245.796-70', '25834831');
	

CREATE TABLE Tb_Funcionario (
Cod_Funcionario INTEGER NOT NULL,
Nome_Funcionario VARCHAR2(45) NOT NULL,
Cpf_Funcionario VARCHAR2(14) NOT NULL,
Rg_Funcionario VARCHAR2(9) NOT NULL,
CONSTRAINT pk_Funcionario PRIMARY KEY (Cod_Funcionario)
);

CREATE SEQUENCE sq_Funcionario;

INSERT INTO Tb_Funcionario (
Cod_Funcionario, Nome_Funcionario, Cpf_Funcionario, Rg_Funcionario) VALUES (sq_Funcionario.NEXTVAL, 'Ana Paula Da Silva', '098.675.777-89', '99098784');
INSERT INTO Tb_Funcionario (
Cod_Funcionario, Nome_Funcionario, Cpf_Funcionario, Rg_Funcionario) VALUES (sq_Funcionario.NEXTVAL, 'Ana Rosa De Aparecida', '154.897.345-93', '77994523');
INSERT INTO Tb_Funcionario (
Cod_Funcionario, Nome_Funcionario, Cpf_Funcionario, Rg_Funcionario) VALUES (sq_Funcionario.NEXTVAL, 'Bruna Oliveira', '543.986.431-12', '78654367');
INSERT INTO Tb_Funcionario (
Cod_Funcionario, Nome_Funcionario, Cpf_Funcionario, Rg_Funcionario) VALUES (sq_Funcionario.NEXTVAL, 'Bruno Rafael Souza', '087.876.953-54', '87654345');
INSERT INTO Tb_Funcionario (
Cod_Funcionario, Nome_Funcionario, Cpf_Funcionario, Rg_Funcionario) VALUES (sq_Funcionario.NEXTVAL, 'Carla De Camargo', '873.897.435-93', '98769876');
	
	
CREATE TABLE Tb_Produto (
Cod_Produto INTEGER NOT NULL,
Desc_Produto VARCHAR2(45) NOT NULL,
Estoque_Produto INTEGER NOT NULL,
Valor_Un NUMBER(7,2) DEFAULT 0,
CONSTRAINT pk_Produto PRIMARY KEY (Cod_Produto)
);

CREATE SEQUENCE sq_Produto;
	
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'TRANSFORMADOR', 15, 329.50);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'ALTERNADOR', 30, 695.00);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'MOTOR ELÉTRICO', 45, 649.00);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'BATERIA', 98, 283.00);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'VARIADOR DE FREQUÊNCIA', 4, 6500.00);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'CONVERSOR', 122, 110.00);
INSERT INTO Tb_Produto (	
Cod_Produto, Desc_Produto, Estoque_Produto, Valor_Un) VALUES (sq_Produto.NEXTVAL, 'INTERRUPTOR', 68, 20.50);
	
CREATE TABLE Tb_Venda (
Cod_Venda INTEGER NOT NULL,
Cod_Cliente INTEGER NOT NULL,
Cod_Funcionario INTEGER NOT NULL,
Dt_Venda DATE NOT NULL,
Ind_Excluido CHAR(1) DEFAULT 0,
CONSTRAINT pk_Venda PRIMARY KEY (Cod_Venda),
CONSTRAINT fk_VendaCliente
    FOREIGN KEY (Cod_Cliente )
    REFERENCES Tb_Cliente(Cod_Cliente),
CONSTRAINT fk_VendaFuncionario
    FOREIGN KEY (Cod_Funcionario )
    REFERENCES Tb_Funcionario(Cod_Funcionario)
);
CREATE SEQUENCE sq_Venda;

CREATE TABLE Tb_ProdutoVenda (
Cod_ProdutoVenda INTEGER NOT NULL,
Cod_Venda INTEGER NOT NULL,
Cod_Produto INTEGER NOT NULL,
Qtde INTEGER NOT NULL,
Valor_Un NUMBER(7,2) DEFAULT 0,
CONSTRAINT pk_ProdutoVenda PRIMARY KEY (Cod_ProdutoVenda),
CONSTRAINT fk_ProdutoVendaVenda
    FOREIGN KEY (Cod_Venda )
    REFERENCES Tb_Venda(Cod_Venda),
CONSTRAINT fk_ProdutoVendaProduto
    FOREIGN KEY (Cod_Produto )
    REFERENCES Tb_Produto(Cod_Produto)
);
CREATE SEQUENCE sq_ProdutoVenda;

CREATE TABLE Tb_Carrinho (
Cod_Carrinho INTEGER NOT NULL,
Cod_Cliente INTEGER NOT NULL,
Ind_Excluido CHAR(1) DEFAULT 0,
CONSTRAINT pk_Carrinho PRIMARY KEY (Cod_Carrinho),
CONSTRAINT fk_Carrinho
    FOREIGN KEY (Cod_Cliente )
    REFERENCES Tb_Cliente(Cod_Cliente)
);
CREATE SEQUENCE sq_Carrinho;

CREATE TABLE Tb_ItensCarrinho (
Cod_ItensCarrinho INTEGER NOT NULL,
Cod_Produto INTEGER NOT NULL,
Cod_Carrinho INTEGER NOT NULL,
Qtde INTEGER NOT NULL,
CONSTRAINT pk_ItensCarrinho PRIMARY KEY (Cod_ItensCarrinho),
CONSTRAINT fk_ProdutosCarrinho
    FOREIGN KEY (Cod_Produto )
    REFERENCES Tb_Produto(Cod_Produto),
CONSTRAINT fk_ItensCarrinho
    FOREIGN KEY (Cod_Carrinho )
    REFERENCES Tb_Carrinho(Cod_Carrinho)
);
CREATE SEQUENCE sq_ItensCarrinho;


/*
ERROR

PROC_ADD_ITENSCARRINHO
	(-20200, 'ID DO CLIENTE NÃO PODE SER NULL!!!');
	(-20201, 'ID DO PRODUTO NÃO PODE SER NULL!!!');
	(-20202, 'QUANTIDADE DO PRODUTO NÃO PODE SER NULL!!!');
	(-20203, 'ID EM USO!!!');
	(-20204, 'PRODUTO OU CLIENTE NÃO EXISTE!!!');
	(-20205, 'QUANTIDADE DO PRODUTO INDISPONIVEL!!!');
	(-20206, 'PRODUTO NÃO EXISTE!!!');
	(-20207, 'ALGUM OUTRO ERRO OCORREU!!!');
	

FUN_VALIDA_PRO_QTDE
	(-20210, 'PRODUTO NÃO EXISTE!!!');
	(-20211, 'ALGUM OUTRO ERRO OCORREU!!!');
	
	
FUN_FECHA_VENDA
	(-20220, 'ID DO CLIENTE NÃO PODE SER NULL!!!');
	(-20221, 'ID DO FUNCIONARIO NÃO PODE SER NULL!!!');
	(-20222, 'CLIENTE OU FUNCIONARIO NÃO EXISTE!!!');
	(-20223, MSG_ERRO);
	(-20224, 'ALGUM OUTRO ERRO OCORREU!!!');
	
	
TRI_ATUALIZA_ESTOQUE
	(-20230, 'QUANTIDADE DO PRODUTO ' || PRO_NOME || ' INSUFICIENTE NO ESTOQUE!!!');
	
	
PROC_DEL_VENDA	
	(-20240, 'ID DA VENDA NÃO PODE SER NULL!!!');
	(-20241, 'ESSA VENDA NÃO EXISTE!!!');
	(-20242, MSG_ERRO);
	(-20243, 'ALGUM OUTRO ERRO OCORREU!!!');
	
	
TRI_ATUALIZA_ESTOQUE_2
	(-20250, 'ESSA VENDA JÁ FOI EXCLUIDA!!!');
*/


---------PROC_ADD_ITENSCARRINHO---------


CREATE OR REPLACE PROCEDURE PROC_ADD_ITENSCARRINHO(
ID_CLIENTE TB_CLIENTE.COD_CLIENTE%TYPE, ID_PRODUTO TB_PRODUTO.COD_PRODUTO%TYPE, PRO_QTDE TB_ITENSCARRINHO.QTDE%TYPE)
IS
	CHECK_CARRINHO BOOLEAN := FALSE;
	ID_CARRINHO TB_CARRINHO.COD_CARRINHO%TYPE;

	ERRO_CLI_NULL EXCEPTION;
	ERRO_PRO_NULL EXCEPTION;
	ERRO_QTD_NULL EXCEPTION;
	ERRO_ESTOQUE EXCEPTION;

	ERRO_FOREIGN_KEY EXCEPTION;
	PRAGMA EXCEPTION_INIT(ERRO_FOREIGN_KEY, -02291);
	ERRO_COD_PRODUTO EXCEPTION;
	PRAGMA EXCEPTION_INIT(ERRO_COD_PRODUTO, -20210);
BEGIN
	--VALIDA ENTRADA DE DADOS--
	
	IF ID_CLIENTE IS NULL THEN
		RAISE ERRO_CLI_NULL;
	ELSIF ID_PRODUTO IS NULL THEN
		RAISE ERRO_PRO_NULL;
	ELSIF PRO_QTDE IS NULL THEN
		RAISE ERRO_QTD_NULL;
	END IF;
	
	--VERIFICA SE O PRODUTO EXISTE E SE ESTA DISPONIVEL NO ESTOQUE--
	
	IF FUN_VALIDA_PRO_QTDE(ID_PRODUTO, PRO_QTDE) THEN
	
		--VERIFICA SE JÁ EXISTE UM CARRINHO ABERTO--
	
		BEGIN
			SELECT
				COD_CARRINHO INTO ID_CARRINHO
			FROM
				TB_CARRINHO
			WHERE
					COD_CLIENTE = ID_CLIENTE
				AND
					IND_EXCLUIDO <> 1;
			
			CHECK_CARRINHO := TRUE;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				CHECK_CARRINHO := FALSE;
			WHEN OTHERS THEN
				CHECK_CARRINHO := FALSE;
		END;
		
		--CASO NÃO EXISTA UM CARRINHO ABERTO ELE É CRIADO E O COD_CARRINHO RETORNADO--
		
		IF NOT CHECK_CARRINHO THEN
			INSERT INTO TB_CARRINHO (COD_CARRINHO, COD_CLIENTE) VALUES (SQ_CARRINHO.NEXTVAL, ID_CLIENTE) RETURNING COD_CARRINHO INTO ID_CARRINHO;
		END IF;
		
		--INSERE O PRODUTO NO CARRINHO DO CLIENTE--
		
		INSERT INTO TB_ITENSCARRINHO (COD_ITENSCARRINHO, COD_PRODUTO, COD_CARRINHO, QTDE) VALUES (SQ_ITENSCARRINHO.NEXTVAL, ID_PRODUTO, ID_CARRINHO, PRO_QTDE);
		
		COMMIT;
		
		DBMS_OUTPUT.PUT_LINE('PRODUTO ADICIONADO COM SUCESSO AO CARRINHO!!!');
		
	ELSE
		RAISE ERRO_ESTOQUE;
	END IF;
	

EXCEPTION
	WHEN ERRO_CLI_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20200, 'ID DO CLIENTE NÃO PODE SER NULL!!!');
	WHEN ERRO_PRO_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20201, 'ID DO PRODUTO NÃO PODE SER NULL!!!');
	WHEN ERRO_QTD_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20202, 'QUANTIDADE DO PRODUTO NÃO PODE SER NULL!!!');
	WHEN DUP_VAL_ON_INDEX THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20203, 'ID EM USO!!!');
	WHEN ERRO_FOREIGN_KEY THEN		
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20204, 'CLIENTE NÃO EXISTE!!!');
	WHEN ERRO_ESTOQUE THEN		
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20205, 'QUANTIDADE DO PRODUTO INDISPONIVEL!!!');
	WHEN ERRO_COD_PRODUTO THEN		
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20206, 'PRODUTO NÃO EXISTE!!!');
	WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20207, 'ALGUM OUTRO ERRO OCORREU!!!');
END;


---------FUN_VALIDA_PRO_QTDE---------


CREATE OR REPLACE FUNCTION FUN_VALIDA_PRO_QTDE(ID_PRODUTO TB_PRODUTO.COD_PRODUTO%TYPE, PRO_QTDE TB_ITENSCARRINHO.QTDE%TYPE) RETURN BOOLEAN
IS
	TOTAL_ESTOQUE TB_PRODUTO.ESTOQUE_PRODUTO%TYPE;	
	
BEGIN
	--PEGA A QUANTIDADE EM ESTOQUE DO PRODUTO E VERIFICA SE O PRODUTO EXISTE--
	
	SELECT
		ESTOQUE_PRODUTO INTO TOTAL_ESTOQUE
	FROM
		TB_PRODUTO
	WHERE
		COD_PRODUTO = ID_PRODUTO;
	
	--RETORNA TRUE SE A QUANTIDADE EM ESTOQUE FOR MAIOR OU IGUAL A QUANTIDADE COLOCADA NO CARRINHO, CASO CONTRARIO RETORNA FALSE--
	
	RETURN (TOTAL_ESTOQUE >= PRO_QTDE);
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN		
		RAISE_APPLICATION_ERROR(-20210, 'PRODUTO NÃO EXISTE!!!');
	WHEN OTHERS THEN		
		RAISE_APPLICATION_ERROR(-20211, 'ALGUM OUTRO ERRO OCORREU!!!');
END;



---------FUN_FECHA_VENDA---------



CREATE OR REPLACE FUNCTION FUN_FECHA_VENDA(ID_CLIENTE TB_CLIENTE.COD_CLIENTE%TYPE, ID_FUNCIONARIO TB_FUNCIONARIO.COD_FUNCIONARIO%TYPE) RETURN BOOLEAN
IS
	ID_VENDA TB_VENDA.COD_VENDA%TYPE;
	ID_CARRINHO TB_CARRINHO.COD_CARRINHO%TYPE;
	
	MSG_ERRO VARCHAR2(512);
	
	CURSOR VEN_CURSOR IS	SELECT
								TB_CARRINHO.COD_CARRINHO, TB_ITENSCARRINHO.COD_PRODUTO, TB_ITENSCARRINHO.QTDE, TB_PRODUTO.VALOR_UN
							FROM
								TB_CARRINHO, TB_ITENSCARRINHO, TB_PRODUTO
							WHERE
									TB_CARRINHO.COD_CLIENTE = ID_CLIENTE
								AND
									TB_CARRINHO.IND_EXCLUIDO <> 1
								AND
									TB_CARRINHO.COD_CARRINHO = TB_ITENSCARRINHO.COD_CARRINHO
								AND
									TB_ITENSCARRINHO.COD_PRODUTO = TB_PRODUTO.COD_PRODUTO;
									
	ERRO_CLI_NULL EXCEPTION;
	ERRO_FUN_NULL EXCEPTION;
	
	ERRO_FOREIGN_KEY EXCEPTION;
	PRAGMA EXCEPTION_INIT(ERRO_FOREIGN_KEY, -02291);
	ERRO_ESTOQUE EXCEPTION;
	PRAGMA EXCEPTION_INIT(ERRO_ESTOQUE, -20230);
BEGIN
	--VALIDA ENTRADA DE DADOS--
	
	IF ID_CLIENTE IS NULL THEN
		RAISE ERRO_CLI_NULL;
	ELSIF ID_FUNCIONARIO IS NULL THEN
		RAISE ERRO_FUN_NULL;
	END IF;
	
	--CRIA VENDA E RETORNA SEU ID--
	
	INSERT INTO TB_VENDA (COD_VENDA, COD_CLIENTE, COD_FUNCIONARIO, DT_VENDA) VALUES (SQ_VENDA.NEXTVAL, ID_CLIENTE, ID_FUNCIONARIO, SYSDATE) RETURNING COD_VENDA INTO ID_VENDA;
	
	--ABRE O CURSOR PARA PEGAR OS ITENS DO CARRINHO DO CLIENTE--
	
	FOR VEN_RECORD IN VEN_CURSOR LOOP
	
		--INSERE OS PRODUTOS NA VENDA--
		
		INSERT INTO TB_PRODUTOVENDA (COD_PRODUTOVENDA, COD_VENDA, COD_PRODUTO, QTDE, VALOR_UN) VALUES (SQ_PRODUTOVENDA.NEXTVAL, ID_VENDA, VEN_RECORD.COD_PRODUTO, VEN_RECORD.QTDE, VEN_RECORD.VALOR_UN);
		
		ID_CARRINHO := VEN_RECORD.COD_CARRINHO;
		
	END LOOP;
	
	--FAZ A EXCLUSÃO LOGICA DO CARRINHO--
	
	UPDATE TB_CARRINHO SET IND_EXCLUIDO = 1 WHERE COD_CARRINHO = ID_CARRINHO;
	
	COMMIT;
	
	RETURN TRUE;
	
EXCEPTION
	WHEN ERRO_CLI_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20220, 'ID DO CLIENTE NÃO PODE SER NULL!!!');
		RETURN FALSE;
	WHEN ERRO_FUN_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20221, 'ID DO FUNCIONARIO NÃO PODE SER NULL!!!');
		RETURN FALSE;
	WHEN ERRO_FOREIGN_KEY THEN		
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20222, 'CLIENTE OU FUNCIONARIO NÃO EXISTE!!!');
		RETURN FALSE;
	WHEN ERRO_ESTOQUE THEN		
		ROLLBACK;
		MSG_ERRO := SQLERRM;
		RAISE_APPLICATION_ERROR(-20223, MSG_ERRO);
		RETURN FALSE;
	WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20224, 'ALGUM OUTRO ERRO OCORREU!!!');
		RETURN FALSE;
END;



---------TRI_ATUALIZA_ESTOQUE---------


CREATE OR REPLACE TRIGGER TRI_ATUALIZA_ESTOQUE
BEFORE INSERT ON TB_PRODUTOVENDA
FOR EACH ROW
DECLARE
	PRO_NOME TB_PRODUTO.DESC_PRODUTO%TYPE;
BEGIN
	--VALIDA A QUANTIDADE EM ESTOQUE DO PRODUTO--
	
	IF FUN_VALIDA_PRO_QTDE(:NEW.COD_PRODUTO, :NEW.QTDE) THEN
		--DA BAIXA NO ESTOQUE--
		
		UPDATE TB_PRODUTO SET ESTOQUE_PRODUTO = ESTOQUE_PRODUTO - :NEW.QTDE WHERE COD_PRODUTO = :NEW.COD_PRODUTO;
	ELSE
	
		SELECT DESC_PRODUTO INTO PRO_NOME FROM TB_PRODUTO WHERE COD_PRODUTO = :NEW.COD_PRODUTO;
		
		RAISE_APPLICATION_ERROR(-20230, 'QUANTIDADE DO PRODUTO ' || PRO_NOME || ' INSUFICIENTE NO ESTOQUE!!!');
	END IF;
END;


---------TRI_ATUALIZA_ESTOQUE_2---------

CREATE OR REPLACE TRIGGER TRI_ATUALIZA_ESTOQUE_2
BEFORE UPDATE OF IND_EXCLUIDO ON TB_VENDA
FOR EACH ROW
DECLARE
	CURSOR VEN_CURSOR IS	SELECT
								COD_PRODUTO, QTDE
							FROM
								TB_PRODUTOVENDA
							WHERE
								COD_VENDA = :OLD.COD_VENDA;	
BEGIN
	--VERIFICA SE ESSA VENDA JÁ NÃO FOI EXCLUIDA--
	
	IF :OLD.IND_EXCLUIDO = 1 THEN
		RAISE_APPLICATION_ERROR(-20250, 'ESSA VENDA JÁ FOI EXCLUIDA!!!');
	END IF;
	
	--CURSOR RETORNA TODOS OS ITENS DA VENDA EXCLUIDA--
	
	FOR VEN_RECORD IN VEN_CURSOR LOOP	
		--VOLTA OS ITENS PARA O ESTOQUE--
		
		UPDATE TB_PRODUTO SET ESTOQUE_PRODUTO = ESTOQUE_PRODUTO + VEN_RECORD.QTDE WHERE COD_PRODUTO = VEN_RECORD.COD_PRODUTO;
		
	END LOOP;
END;


---------PROC_DEL_VENDA---------

CREATE OR REPLACE PROCEDURE PROC_DEL_VENDA(ID_VENDA TB_VENDA.COD_VENDA%TYPE)
IS	
	MSG_ERRO VARCHAR2(512);
	
	ERRO_VEN_NULL EXCEPTION;
	ERRO_COD_VENDA EXCEPTION;
	
	ERRO_VENDA EXCEPTION;
	PRAGMA EXCEPTION_INIT(ERRO_VENDA, -20250);

BEGIN
	--VALIDA ENTRADA DE DADOS--
	
	IF ID_VENDA IS NULL THEN
		RAISE ERRO_VEN_NULL;	
	END IF;
	
	--FAZ A EXCLUSÃO LOGICA DA VENDA--
	
	UPDATE TB_VENDA SET IND_EXCLUIDO = 1 WHERE COD_VENDA = ID_VENDA;
	
	--VERIFICA SE ALGUMA VENDA FOI EXCLUIDA--
	
	IF SQL%ROWCOUNT = 0 THEN
		RAISE ERRO_COD_VENDA;
	END IF;

	COMMIT;
	DBMS_OUTPUT.PUT_LINE('VENDA EXCLUIDA COM SUCESSO!!!');
	
EXCEPTION
	WHEN ERRO_VEN_NULL THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20240, 'ID DA VENDA NÃO PODE SER NULL!!!');
	WHEN ERRO_COD_VENDA THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20241, 'ESSA VENDA NÃO EXISTE!!!');
	WHEN ERRO_VENDA THEN
		ROLLBACK;
		MSG_ERRO := SQLERRM;
		RAISE_APPLICATION_ERROR(-20242, MSG_ERRO);
	WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20243, 'ALGUM OUTRO ERRO OCORREU!!!');
END;
CREATE OR REPLACE PACKAGE PKG_JOB IS
	PROCEDURE ADD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE, PMIN IN JOBS.MIN_SALARY%TYPE, PMAX IN JOBS.MAX_SALARY%TYPE);
	PROCEDURE UPD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE);
	PROCEDURE DEL_JOBS(ID IN JOBS.JOB_ID%TYPE);
	PROCEDURE GET_EMPLOYEE(ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, SALARIO OUT EMPLOYEES.SALARY%TYPE, JOB OUT EMPLOYEES.JOB_ID%TYPE);
END PKG_JOB;



CREATE OR REPLACE PACKAGE BODY PKG_JOB IS
	PROCEDURE ADD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE, PMIN IN JOBS.MIN_SALARY%TYPE, PMAX IN JOBS.MAX_SALARY%TYPE) IS
		VERIFICA_SAL EXCEPTION;
		DESC_NULL EXCEPTION;
		PRAGMA EXCEPTION_INIT(DESC_NULL, -1400);
	BEGIN
	   IF PMIN > PMAX THEN
		RAISE VERIFICA_SAL;
	   END IF;

		INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES(ID, TITULO, PMIN, PMAX);
	EXCEPTION
	  WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('ID ' || ID||' EM USO.');
	  WHEN VERIFICA_SAL THEN
		DBMS_OUTPUT.PUT_LINE('MIN SALARIO MAIOR QUE MAX SALARIO.');
	  WHEN DESC_NULL THEN
		DBMS_OUTPUT.PUT_LINE('TITULO NÃO PODE SER NULL');
	  WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
	END;
	
	PROCEDURE UPD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE) IS
	  DESC_NULL EXCEPTION;
	  PRAGMA EXCEPTION_INIT(DESC_NULL, -1407);
	  NENHUMA_LINHA EXCEPTION;
	BEGIN
	   UPDATE JOBS SET JOB_TITLE = TITULO WHERE JOB_ID = ID;

	   IF SQL%ROWCOUNT = 0 THEN
		RAISE NENHUMA_LINHA;
	   END IF;

	EXCEPTION
	  WHEN NENHUMA_LINHA THEN
		DBMS_OUTPUT.PUT_LINE('NENHUMA LINHA ALTERADA.');

	  WHEN DESC_NULL THEN
		DBMS_OUTPUT.PUT_LINE('TITULO NÃO PODE SER NULL');

	  WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
	END;
	
	PROCEDURE DEL_JOBS(ID IN JOBS.JOB_ID%TYPE) IS
	  DEL EXCEPTION;
	  PRAGMA EXCEPTION_INIT(DEL, -02292);
	  NENHUMA_LINHA EXCEPTION;
	BEGIN
	   DELETE FROM JOBS WHERE JOB_ID = ID;
	   IF SQL%ROWCOUNT = 0 THEN
		RAISE NENHUMA_LINHA;
	   END IF;
	EXCEPTION
	  WHEN NENHUMA_LINHA THEN
		DBMS_OUTPUT.PUT_LINE('NENHUMA LINHA ALTERADA.');
	  WHEN DEL THEN
		DBMS_OUTPUT.PUT_LINE('NÃO PODE DELETAR UM REGISTRO PAI');
	  WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
	END;
	
	PROCEDURE GET_EMPLOYEE(ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, SALARIO OUT EMPLOYEES.SALARY%TYPE, JOB OUT EMPLOYEES.JOB_ID%TYPE) IS
	BEGIN
	   SELECT SALARY, JOB_ID INTO SALARIO, JOB FROM EMPLOYEES WHERE EMPLOYEE_ID = ID;
	EXCEPTION
	  WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NÃO EXISTE ESSE EMPREGADO.');
		JOB := 'NÃO EXISTE';
		SALARIO := 0;
	  WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
		JOB := 'NÃO EXISTE';
		SALARIO := 0;
	END;
	
END PKG_JOB;

DECLARE
	ID EMPLOYEES.EMPLOYEE_ID%TYPE := 100;
	SALARIO EMPLOYEES.SALARY%TYPE;
	JOB EMPLOYEES.JOB_ID%TYPE;
BEGIN
	PKG_JOB.GET_EMPLOYEE(ID, SALARIO, JOB);
	DBMS_OUTPUT.PUT_LINE('SALARIO: ' || SALARIO || ' JOB: ' || JOB);
EXCEPTION
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
END;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE PKG_EMPLOYEE IS
	FUNCTION GET_JOB(ID JOBS.JOB_ID%TYPE) RETURN JOBS.JOB_TITLE%TYPE;
	PROCEDURE PROC_ADD_EMPLOYEE(NOME EMPLOYEES.FIRST_NAME%TYPE, SOBRE EMPLOYEES.LAST_NAME%TYPE, EMAIL EMPLOYEES.EMAIL%TYPE, DEPT EMPLOYEES.DEPARTMENT_ID%TYPE, DATA EMPLOYEES.HIRE_DATE%TYPE);
END PKG_EMPLOYEE;


CREATE OR REPLACE PACKAGE BODY PKG_EMPLOYEE IS
	
	FUNCTION GET_JOB(ID JOBS.JOB_ID%TYPE) RETURN JOBS.JOB_TITLE%TYPE
	AS
		TITULO JOBS.JOB_TITLE%TYPE;
	BEGIN
		SELECT JOB_TITLE INTO TITULO FROM JOBS WHERE JOB_ID = ID;
		RETURN TITULO;
	EXCEPTION
		WHEN TOO_MANY_ROWS THEN
			RETURN 'EXISTE MAIS DE UM JOB NO BANCO DE DADOS';
		WHEN NO_DATA_FOUND THEN
			RETURN 'NÃO ENCONTROU JOB COM ESTE NOME NO BANCO DE DADOS';
		WHEN OTHERS THEN
			RETURN 'OCORREU UM ERRO';
	END;
	
	FUNCTION FUN_VALID_DEPTID(ID EMPLOYEES.DEPARTMENT_ID%TYPE) RETURN BOOLEAN
	AS
		WID EMPLOYEES.DEPARTMENT_ID%TYPE;
	BEGIN
		SELECT DEPARTMENT_ID INTO WID FROM DEPARTMENTS WHERE DEPARTMENT_ID = ID;
		IF SQL%ROWCOUNT > 0 THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN FALSE;
		WHEN OTHERS THEN
			RETURN FALSE;
	END;
	
	PROCEDURE PROC_ADD_EMPLOYEE(NOME EMPLOYEES.FIRST_NAME%TYPE, SOBRE EMPLOYEES.LAST_NAME%TYPE, EMAIL EMPLOYEES.EMAIL%TYPE, DEPT EMPLOYEES.DEPARTMENT_ID%TYPE, DATA EMPLOYEES.HIRE_DATE%TYPE)
	AS
		ERRO_DATA EXCEPTION;
		ERRO_DEPARTAMENTO EXCEPTION;
	BEGIN
		IF DATA < SYSDATE THEN
			RAISE ERRO_DATA;
		END IF;
		IF FUN_VALID_DEPTID(DEPT) THEN	
			INSERT INTO EMPLOYEES(FIRST_NAME, LAST_NAME, EMAIL, DEPARTMENT_ID, HIRE_DATE) VALUES(NOME, SOBRE, EMAIL, DEPT, DATA);
		ELSE
			RAISE ERRO_DEPARTAMENTO;
		END IF;
	EXCEPTION
		WHEN ERRO_DEPARTAMENTO THEN
			DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NÃO CADASTRADO.');
		WHEN ERRO_DATA THEN
			DBMS_OUTPUT.PUT_LINE('DATA INVALIDA.');
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('ERRO!!!');
	END;
	
END PKG_EMPLOYEE;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_COUNTRIE IS
	FUNCTION DEPT_DESC(ID DEPARTMENTS.DEPARTMENT_ID%TYPE) RETURN DEPARTMENTS.DEPARTMENT_NAME%TYPE;
	FUNCTION PAIS_DESC(ID COUNTRIES.COUNTRY_ID%TYPE) RETURN COUNTRIES.COUNTRY_NAME%TYPE;
	PROCEDURE PROC_OP_COUNTRIES(ID COUNTRIES.COUNTRY_ID%TYPE, NOME COUNTRIES.COUNTRY_NAME%TYPE, REGION COUNTRIES.REGION_ID%TYPE, OPERACAO VARCHAR2);
END PKG_COUNTRIE;


CREATE OR REPLACE PACKAGE BODY PKG_COUNTRIE IS
	FUNCTION DEPT_DESC(ID DEPARTMENTS.DEPARTMENT_ID%TYPE) RETURN DEPARTMENTS.DEPARTMENT_NAME%TYPE
	AS
		NOME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
	BEGIN
		SELECT DEPARTMENT_NAME INTO NOME FROM DEPARTMENTS WHERE DEPARTMENT_ID = ID;
		RETURN NOME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN 'DEPARTEMENTO NÃO EXISTE';
		WHEN OTHERS THEN
			RETURN 'ERRO!!!';
	END;

	FUNCTION PAIS_DESC(ID COUNTRIES.COUNTRY_ID%TYPE) RETURN COUNTRIES.COUNTRY_NAME%TYPE
	AS
		NOME COUNTRIES.COUNTRY_NAME%TYPE;
	BEGIN
		SELECT COUNTRY_NAME INTO NOME FROM COUNTRIES WHERE COUNTRY_ID = ID;
		RETURN NOME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN NULL;
		WHEN OTHERS THEN
			RETURN NULL;
	END;

	PROCEDURE PROC_OP_COUNTRIES(ID COUNTRIES.COUNTRY_ID%TYPE, NOME COUNTRIES.COUNTRY_NAME%TYPE, REGION COUNTRIES.REGION_ID%TYPE, OPERACAO VARCHAR2)
	AS
		ERRO_OPERACAO EXCEPTION;
		NENHUMA_LINHA EXCEPTION;
		DESC_NULL EXCEPTION;	
		PRAGMA EXCEPTION_INIT(DESC_NULL, -1407);
		DEL EXCEPTION;
		PRAGMA EXCEPTION_INIT(DEL, -02292);
	BEGIN
		IF OPERACAO = 'INCLUSAO' THEN
		
			INSERT INTO COUNTRIES(COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES(ID, NOME, REGION);
			
		ELSIF OPERACAO = 'ALTERACAO' THEN
		
			UPDATE COUNTRIES SET COUNTRY_NAME = NOME WHERE COUNTRY_ID = ID;
			
			IF SQL%ROWCOUNT = 0 THEN
				RAISE NENHUMA_LINHA;
			END IF;
			
		ELSIF OPERACAO = 'EXCLUSAO' THEN
		
			DELETE FROM COUNTRIES WHERE COUNTRY_ID = ID;
			
			IF SQL%ROWCOUNT = 0 THEN
				RAISE NENHUMA_LINHA;
			END IF;
			
		ELSE
		
			RAISE ERRO_OPERACAO;
			
		END IF;
	EXCEPTION
		WHEN DUP_VAL_ON_INDEX THEN
			DBMS_OUTPUT.PUT_LINE('ID ' || ID||' EM USO.');
		WHEN NENHUMA_LINHA THEN
			DBMS_OUTPUT.PUT_LINE('NENHUMA LINHA ALTERADA.');
		WHEN ERRO_OPERACAO THEN
			DBMS_OUTPUT.PUT_LINE('OPERAÇÃO INVALIDA!!!');
		WHEN DESC_NULL THEN
			DBMS_OUTPUT.PUT_LINE('TITULO NÃO PODE SER NULL');
		WHEN DEL THEN
			DBMS_OUTPUT.PUT_LINE('NÃO PODE DELETAR UM REGISTRO PAI');
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('ERRO!!!');
	END;
END PKG_COUNTRIE;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_MOEDA IS
	VL_DOLAR NUMBER := 0.10;
	VL_EURO NUMBER := 0.20;
	VL_PESO NUMBER := 0.30;
	FUNCTION FUN_MOEDA(ID_MOEDA VARCHAR2, VALOR NUMBER) RETURN NUMBER;
END PKG_MOEDA;

CREATE OR REPLACE PACKAGE BODY PKG_MOEDA IS
	FUNCTION FUN_MOEDA(ID_MOEDA VARCHAR2, VALOR NUMBER) RETURN NUMBER
	AS
		ERRO_NULL EXCEPTION;
		ERRO_MOEDA EXCEPTION;
		CON_VALOR NUMBER := 0;
	BEGIN

		IF ID_MOEDA IS NULL OR VALOR IS NULL THEN
			RAISE ERRO_NULL;
		END IF;
		
		IF ID_MOEDA = 'DOLAR' THEN
			CON_VALOR := VALOR * VL_DOLAR;
		ELSIF ID_MOEDA = 'EURO' THEN
			CON_VALOR := VALOR * VL_EURO;
		ELSIF ID_MOEDA = 'PESO' THEN
			CON_VALOR := VALOR * VL_PESO;
		ELSE
			RAISE ERRO_MOEDA;
		END IF;
		
		RETURN CON_VALOR;
	EXCEPTION
		WHEN ERRO_NULL THEN
			DBMS_OUTPUT.PUT_LINE('ENTRADA NÃO PODE SER NULL');
			RAISE;
		WHEN ERRO_MOEDA THEN
			DBMS_OUTPUT.PUT_LINE('MOEDA INVALIDA');
			RAISE;
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('ERRO!!!');
			RAISE;
	END;
END PKG_MOEDA;


DECLARE
	VALOR NUMBER;
BEGIN
	VALOR := PKG_MOEDA.FUN_MOEDA('DOLAR', 100);
	DBMS_OUTPUT.PUT_LINE('VALOR: ' || VALOR);
	VALOR := PKG_MOEDA.FUN_MOEDA('EURO', 100);
	DBMS_OUTPUT.PUT_LINE('VALOR: ' || VALOR);
	VALOR := PKG_MOEDA.FUN_MOEDA('PESO', 100);
	DBMS_OUTPUT.PUT_LINE('VALOR: ' || VALOR);
EXCEPTION
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERRO!!!');
END;




select text from all_source WHERE name = 'PKG_EMPLOYEE'




















CREATE OR REPLACE FUNCTION PROC_SALARIO(ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, PERCENT IN NUMERIC) RETURNS VOID
AS
$$
BEGIN
	UPDATE EMP SET SALARY = SALARY * (1 + PERCENT / 100) WHERE EMPLOYEE_ID = ID;
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
DECLARE
	SAL_ANTIGO EMPLOYEES.SALARY%TYPE;
	SAL_NOVO EMPLOYEES.SALARY%TYPE;
BEGIN
	SELECT SALARY INTO SAL_ANTIGO FROM EMP WHERE EMPLOYEE_ID = 176;
	
	EXECUTE PROC_SALARIO(176,10);
	
	SELECT SALARY INTO SAL_NOVO FROM EMP WHERE EMPLOYEE_ID = 176;
	
	RAISE NOTICE 'SALARIO ANTIGO: %, SALARIO NOVO: %', SAL_ANTIGO, SAL_NOVO;
END;
$$

-----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PROC_ADD_DEPARTMENT(NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE, MANAGER DEPARTMENTS.MANAGER_ID%TYPE, LOCATION DEPARTMENTS.LOCATION_ID%TYPE) RETURNS VOID
AS
$$
BEGIN
	INSERT INTO DEPARTMENTS(DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES(NAME, MANAGER, LOCATION);
	RAISE NOTICE 'ADDED DEPT: %', NAME;
EXCEPTION	
	WHEN OTHERS THEN
		RAISE NOTICE 'ERR:. ADDING DEPT: %', NAME;
		RAISE;
END;
$$LANGUAGE PLPGSQL


CREATE OR REPLACE FUNCTION PROC_CREATE_DEPARTMENTS() RETURNS VOID
AS
$$
BEGIN
	EXECUTE PROC_ADD_DEPARTMENT('MEDIA', 100, 1800);
	EXECUTE PROC_ADD_DEPARTMENT('EDITING', 99, 1800);
	EXECUTE PROC_ADD_DEPARTMENT('MENOR', 101, 1800);
EXCEPTION	
	WHEN OTHERS THEN
		RAISE NOTICE 'ERR:. ADDING DEPT';
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
BEGIN
	EXECUTE PROC_CREATE_DEPARTMENTS();
END;
$$

-----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PROC_ADD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE, MIN_SAL IN JOBS.MIN_SALARY%TYPE, MAX_SAL IN JOBS.MAX_SALARY%TYPE) RETURNS VOID
AS
$$
BEGIN
	IF MIN_SAL > MAX_SAL THEN
		RAISE EXCEPTION USING ERRCODE = 'NOSAL'; --- 'ERRCODE' TEM QUE TER EXATAMENTE 5 DÍGITOS ??? POR QUE ???
   	END IF;
	
	INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES(ID, TITULO, MIN_SAL, MAX_SAL);
EXCEPTION
	WHEN NOT_NULL_VIOLATION THEN
		RAISE NOTICE 'NÃO PODE TER VALORES NULL';
	WHEN UNIQUE_VIOLATION THEN
		RAISE NOTICE 'ID: % EM USO.', ID;
	WHEN SQLSTATE 'NOSAL' THEN
    	RAISE NOTICE 'MIN SALARIO MAIOR QUE MAX SALARIO.';
	WHEN OTHERS THEN
		RAISE NOTICE 'ERRO';
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
BEGIN
	EXECUTE PROC_ADD_JOBS('TES_TE','TESTE', 100, 50);
END;
$$

-----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PROC_UPD_JOBS(ID IN JOBS.JOB_ID%TYPE, TITULO IN JOBS.JOB_TITLE%TYPE) RETURNS VOID
AS
$$
DECLARE
	RES INTEGER;
BEGIN	
	UPDATE JOBS SET JOB_TITLE = TITULO WHERE JOB_ID = ID;
	GET DIAGNOSTICS RES = ROW_COUNT;
	
	IF RES = 0 THEN
		RAISE EXCEPTION USING ERRCODE = '00LIN';
   	END IF;
EXCEPTION
	WHEN NOT_NULL_VIOLATION THEN
		RAISE NOTICE 'TITULO OU ID NÃO PODE TER VALORES NULL';
	WHEN SQLSTATE '00LIN' THEN
    	RAISE NOTICE 'NENHUMA LINHA ALTERADA.';
	WHEN OTHERS THEN
		RAISE NOTICE 'ERRO';
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
BEGIN
	EXECUTE PROC_UPD_JOBS('TES_TE','TESTE');
END;
$$

-----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PROC_DEL_JOBS(ID IN JOBS.JOB_ID%TYPE) RETURNS VOID
AS
$$
DECLARE
	RES INTEGER;
BEGIN	
	DELETE FROM JOBS WHERE JOB_ID = ID;
	GET DIAGNOSTICS RES = ROW_COUNT;
	
	IF RES = 0 THEN
		RAISE EXCEPTION USING ERRCODE = '00LIN';
   	END IF;
EXCEPTION
	WHEN FOREIGN_KEY_VIOLATION THEN
		RAISE NOTICE 'NÃO PODE DELETAR UM REGISTRO PAI';
	WHEN SQLSTATE '00LIN' THEN
    	RAISE NOTICE 'NENHUMA LINHA DELETADA.';
	WHEN OTHERS THEN
		RAISE NOTICE 'ERRO';
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
BEGIN
	EXECUTE PROC_DEL_JOBS('TES_TE');
END;
$$

-----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION PROC_GET_EMPLOYEE(ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, SALARIO OUT EMPLOYEES.SALARY%TYPE, JOB OUT EMPLOYEES.JOB_ID%TYPE)
AS
$$
BEGIN	
	SELECT SALARY, JOB_ID INTO STRICT SALARIO, JOB FROM EMPLOYEES WHERE EMPLOYEE_ID = ID;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE NOTICE 'NÃO EXISTE ESSE EMPREGADO.';
		JOB := 'NÃO EXISTE';
    	SALARIO := 0;
	WHEN OTHERS THEN
		RAISE NOTICE 'ERRO';
		JOB := 'NÃO EXISTE';
    	SALARIO := 0;
END;
$$LANGUAGE PLPGSQL

-----TESTE-----

DO
$$
DECLARE
	ID EMPLOYEES.EMPLOYEE_ID%TYPE := 100;
	SALARIO EMPLOYEES.SALARY%TYPE;
	JOB EMPLOYEES.JOB_ID%TYPE;
BEGIN
	SELECT * INTO SALARIO, JOB FROM PROC_GET_EMPLOYEE(ID);
	RAISE NOTICE 'SALARIO: %, JOB: %', SALARIO, JOB;
END;
$$